#%RAML 0.8
---
title: LiveOak Scripting REST
version: alpha02
#baseUri: http://localhost:8080/admin/applications/{appId}/resources/scripts
documentation:
  - title: LiveOak Scripting
    content: |
      The LiveOak scripting REST endpoints here describe how to setup
      and configure the scripts within your LiveOak instance. Creating
      and managing scripts falls under an administrator role, and
      as such all of these endpoints are available under the private
      admin interface:

      >/admin/applications/{appId}/resources/scripts

traits:
  - collection:
      queryParameters:
        limit:
          description: the number of results to return
          type: number
        offset:
          description: the offset for returned results
          type: number
        sort:
          description: the field to sort on. Can take multiple parameters
            separated by a comma and a negative result returns the sorting 
            in reverse order.
          example: -price,name
        

/resource-triggered-scripts:
  displayName: Resource Triggered Scripts
  description: |
    These types of scripts are triggered whenever a resource is accessed or
    modified.
  get:
    is: [ collection ]
    description: |
      Lists all the available resource triggered scripts
    queryParameters:
      target:
        description: filters the list of resource triggered scripts to be those
          which are only applied to this path.
        example: /test/storage/products/123XYZ

  post:
    description: |
      Creates a new resource triggered script
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "properties": {
               "id": {
                 "type": "string",
                 "required": false,
                 "default": "System generated UUID"
               },
               "name" : {
                 "type": "string",
                 "required": false,
                 "description": "A human readable name for this script"
               },
               "description" : {
                 "type": "string",
                 "required": false,
                 "description": "A human readable description for this script" 
               },
               "target-path" : {
                 "type": "string",
                 "required": true,
                 "description": "The path of the targets to monitor"
               },
               "priority": {
                 "type": "number",
                 "required": false,
                 "default": 1,
                 "description": "Specifies the order this script should be run. The higher the priority the sooner the script is executed"
               },
               "enabled": {
                 "type": "boolean",
                 "required": false,
                 "default": true
               },
               "libraries": {
                 "type": "array",
                 "required": false,
                 "description": "The list of libraries available to the script"
               }
             }
          }
        example: |
          { 
            "id": "myScript",
            "name": "MyScript",
            "description": "This script does some cool stuff my monitoring what is stored in the products database collection",
            "target-path": "/myApp/storage/products/*",
            "priority": 1,
            "enabled": true,
            "libraries": ["client"]
          }


  /{id}:
    uriParameters:
      id:
        description: The script id    

    get:
      description: Get the script
      responses:
        200:
          body:
            application/json:
              example: |
               {
                 "id": "myScript",
                 "name": "MyScript",
                 "description": "This script does some cool stuff my monitoring what is stored in the products database collection",
                 "target-path": "/myApp/storage/products/*",
                 "priority": 1,
                 "enabled": true,
                 "libraries": ["client"]
               }

    put:
      description: Update the script's metadata

    delete:
      description: Delete the script

    /script:
      get:
        description: Get the script's javascript source. 
        responses:
          200:
            body:
              application/javascript:
                example: !include example.js

      put:
        description: Update the script's javascript source
        body:
         application/javascript:
           example: !include example.js

      delete:
        description: Delete the script's javascript source

/endpoint-scripts:
  displayName: Endpoint Scripts
  description: |
    Scripts which will expose custom endpoints to be used by client applications.
  
    **COMING SOON**

/sheduled-scripts:
  displayName: Scheduled Scripts
  description: |
    Scripts which are run at specific times or at certain intervals.
  
    **COMING SOON**

/libraries:
  displayName: Script Libraries 
  description: |
    Collections of javascript libraries to be exposed to scripts if requested.
  
    **COMING SOON**
       
